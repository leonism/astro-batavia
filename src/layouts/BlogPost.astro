---
import type { CollectionEntry } from 'astro:content';
import Layout from './Layout.astro';
import { formatDate, getLangFromUrl, useTranslations } from '@/i18n/utils';
import { generateStructuredData } from '@/utils/seo';

type Props = CollectionEntry<'blog'>['data'] & {
  slug: string;
  readingTime?: string;
};

const { title, description, pubDate, updatedDate, heroImage, author, tags, slug, readingTime } = Astro.props;

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const structuredData = generateStructuredData({
  title,
  description,
  image: heroImage,
  author,
  datePublished: pubDate,
  dateModified: updatedDate,
  url: Astro.url.href,
});
---

<Layout 
  title={title}
  description={description}
  image={heroImage}
  lang={lang}
>
  <script type="application/ld+json" set:html={JSON.stringify(structuredData)} />
  
  <article class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <!-- Back to blog link -->
    <div class="mb-8">
      <a 
        href={lang === 'en' ? '/blog' : `/${lang}/blog`}
        class="inline-flex items-center text-primary-600 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-300 transition-colors duration-200"
      >
        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
        </svg>
        {t('blog.back-to-blog')}
      </a>
    </div>

    <!-- Article header -->
    <header class="mb-8">
      {heroImage && (
        <div class="mb-8 rounded-lg overflow-hidden">
          <img 
            src={heroImage} 
            alt={title}
            class="w-full h-64 sm:h-80 lg:h-96 object-cover"
            loading="eager"
            decoding="async"
          />
        </div>
      )}
      
      <h1 class="text-3xl sm:text-4xl lg:text-5xl font-bold mb-4 text-gray-900 dark:text-gray-100">
        {title}
      </h1>
      
      <p class="text-lg sm:text-xl text-gray-600 dark:text-gray-300 mb-6">
        {description}
      </p>
      
      <div class="flex flex-wrap items-center gap-4 text-sm text-gray-500 dark:text-gray-400">
        <div class="flex items-center">
          <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
          </svg>
          <span>{author}</span>
        </div>
        
        <div class="flex items-center">
          <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
          </svg>
          <time datetime={pubDate.toISOString()}>
            {t('blog.published')} {formatDate(pubDate, lang)}
          </time>
        </div>
        
        {updatedDate && (
          <div class="flex items-center">
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
            </svg>
            <time datetime={updatedDate.toISOString()}>
              {t('blog.updated')} {formatDate(updatedDate, lang)}
            </time>
          </div>
        )}
        
        {readingTime && (
          <div class="flex items-center">
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <span>{readingTime}</span>
          </div>
        )}
      </div>
      
      {tags && tags.length > 0 && (
        <div class="mt-6">
          <div class="flex flex-wrap gap-2">
            {tags.map((tag) => (
              <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-primary-100 text-primary-800 dark:bg-primary-900 dark:text-primary-200">
                #{tag}
              </span>
            ))}
          </div>
        </div>
      )}
    </header>
    
    <!-- Article content -->
    <div class="prose prose-lg max-w-none dark:prose-dark prose-headings:font-semibold prose-headings:text-gray-900 dark:prose-headings:text-gray-100 prose-p:text-gray-700 dark:prose-p:text-gray-300 prose-a:text-primary-600 hover:prose-a:text-primary-700 dark:prose-a:text-primary-400 dark:hover:prose-a:text-primary-300 prose-code:text-primary-600 dark:prose-code:text-primary-400 prose-pre:bg-gray-900 dark:prose-pre:bg-gray-800">
      <slot />
    </div>
  </article>
</Layout>
