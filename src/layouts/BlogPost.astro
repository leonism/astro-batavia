---
import { getCollection, type CollectionEntry } from 'astro:content';
import Layout from './Layout.astro';
import Picture from '@/components/ui/Picture.astro';
import BlogPostNavigation from '@/components/navigation/BlogPostNavigation.astro';
import ShareButtons from '@/components/blog/ShareButtons.astro';
import { formatDate, getLangFromUrl, useTranslations, getLocalizedPath } from '@/i18n/utils';

type Props = CollectionEntry<'blog'>['data'] & {
  slug: string;
  readingTime?: string;
};

const { title, description, pubDate, editDate: updatedDate, heroImage, author, tags, slug, readingTime } = Astro.props;

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// Fetch all posts for the current language to find next/previous
const allLangPosts = await getCollection('blog', (entry: CollectionEntry<'blog'>) => {
  return entry.slug.startsWith(`${lang}/blog/`) && !entry.data.draft;
});

// Sort posts by publication date (ascending for easier next/prev indexing)
const sortedLangPosts = allLangPosts.sort(
  (a: CollectionEntry<'blog'>, b: CollectionEntry<'blog'>) => new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime()
);

// The 'slug' prop comes as 'en/blog/post-title' and collection slugs are also 'en/blog/post-title'
// So we can use the slug directly for matching
const currentPostCollectionSlug = slug;
const currentIndex = sortedLangPosts.findIndex((post: CollectionEntry<'blog'>) => post.slug === currentPostCollectionSlug);



let previousPostData: { url: string; title: string } | undefined = undefined;
let nextPostData: { url: string; title: string } | undefined = undefined;

if (currentIndex !== -1) {
  if (currentIndex > 0) {
    const prev = sortedLangPosts[currentIndex - 1];
    const prevSlugWithoutLang = prev.slug.replace(/^(en|es|ja)\/blog\//g, '');
    const prevUrl = getLocalizedPath(`/blog/${prevSlugWithoutLang}`, lang);
    previousPostData = {
      url: prevUrl,
      title: prev.data.title,
    };
  }
  if (currentIndex < sortedLangPosts.length - 1) {
    const next = sortedLangPosts[currentIndex + 1];
    const nextSlugWithoutLang = next.slug.replace(/^(en|es|ja)\/blog\//g, '');
    const nextUrl = getLocalizedPath(`/blog/${nextSlugWithoutLang}`, lang);
    nextPostData = {
      url: nextUrl,
      title: next.data.title,
    };
  }
}

console.log("Current Post Slug:", currentPostCollectionSlug);
console.log("Sorted Lang Posts:", sortedLangPosts.map(p => p.slug));
console.log("Current Index:", currentIndex);
console.log("Previous Post Data:", previousPostData);
console.log("Next Post Data:", nextPostData);

// Structured data is now handled by the enhanced SEO component
---

<Layout
  title={title}
  description={description}
  image={heroImage}
  lang={lang}
  type="article"
  publishedTime={pubDate.toISOString()}
  modifiedTime={updatedDate?.toISOString()}
  author={author}
  tags={tags || []}
  readingTime={readingTime ? parseInt(readingTime.replace(/\D/g, '')) : undefined}
  wordCount={undefined}
  excerpt={description}
  breadcrumbs={[
    { name: t('nav.home'), url: getLocalizedPath('/', lang) },
    { name: t('nav.blog'), url: getLocalizedPath('/blog', lang) },
    { name: title, url: Astro.url.pathname }
  ]}
  organization={{
    name: "Astro Batavia",
    url: "https://astro-batavia.vercel.app",
    logo: "https://astro-batavia.vercel.app/favicon.svg",
    sameAs: [
      "https://github.com/yourusername",
      "https://twitter.com/yourusername",
      "https://linkedin.com/company/yourcompany"
    ]
  }}
>

  <article class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <!-- Back to blog link -->
    <div class="mb-8">
      <a
        href={getLocalizedPath('/blog', lang)}
        class="inline-flex items-center text-primary-600 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-300 transition-colors duration-200"
      >
        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
        </svg>
        {t('blog.back-to-blog')}
      </a>
    </div>

    <!-- Article header -->
    <header class="mb-8">
      {heroImage && (
        <div class="mb-8 rounded-lg overflow-hidden">
          <Picture
            src={heroImage}
            alt={title}
            width={1200}
            height={600}
            class="w-full h-64 sm:h-80 lg:h-96 object-cover"
            loading="eager"
            decoding="async"
            sizes="(max-width: 768px) 100vw, (max-width: 1200px) 80vw, 1200px"
          />
        </div>
      )}

      <h1 class="text-3xl sm:text-4xl lg:text-5xl font-bold mb-4 text-gray-900 dark:text-gray-100">
        {title}
      </h1>

      <p class="text-lg sm:text-xl text-gray-600 dark:text-gray-300 mb-6">
        {description}
      </p>

      <div class="flex flex-wrap items-center gap-4 text-sm text-gray-500 dark:text-gray-400">
        <div class="flex items-center">
          <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
          </svg>
          <span>{author}</span>
        </div>

        <div class="flex items-center">
          <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
          </svg>
          <time datetime={pubDate.toISOString()}>
            {t('blog.publishedOn')} {formatDate(pubDate, lang)}
          </time>
        </div>

        {updatedDate && (
          <div class="flex items-center">
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
            </svg>
            <time datetime={updatedDate.toISOString()}>
              Updated {formatDate(updatedDate, lang)}
            </time>
          </div>
        )}

        {readingTime && (
          <div class="flex items-center">
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <span>{readingTime}</span>
          </div>
        )}
      </div>

      {tags && tags.length > 0 && (
        <div class="mt-6">
          <div class="flex flex-wrap gap-2">
            {tags.map((tag: string) => (
              <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-primary-100 text-primary-800 dark:bg-primary-900 dark:text-primary-200">
                #{tag}
              </span>
            ))}
          </div>
        </div>
      )}
    </header>

    <!-- Article content -->
    <div class="prose prose-lg max-w-none dark:prose-invert">
      <slot />
    </div>

    <!-- Share Buttons -->
    <ShareButtons title={title} url={Astro.url.href} />

    <!-- Article Navigation -->
    <BlogPostNavigation
      previousPostData={previousPostData}
      nextPostData={nextPostData}
      lang={lang}
    />
  </article>
</Layout>
