---
import { useTranslations } from '@/i18n/utils';
import type { LanguageKey } from '@/i18n/types';

interface Heading {
  depth: number;
  slug: string;
  text: string;
}

interface Props {
  headings: Heading[];
  lang: LanguageKey;
}

const { headings, lang } = Astro.props;
const t = useTranslations(lang);
---

<div class="toc-container bg-white/90 dark:bg-gray-900/70 p-6 rounded-2xl shadow-lg ring-1 ring-gray-200 dark:ring-gray-700 backdrop-blur-md mb-8">
  <div class="flex items-center justify-between cursor-pointer group" id="toc-toggle-wrapper">
    <div class="flex items-center gap-3">
      <h2 class="text-2xl font-semibold text-gray-900 dark:text-white tracking-tight">
        {t('blog.tableOfContents')}
      </h2>
    </div>
    <button
      type="button"
      aria-label="Toggle Table of Contents"
      class="flex items-center justify-center w-9 h-9 border border-primary-600 dark:border-primary-400 rounded-full transition-colors duration-300 group-hover:bg-primary-50 dark:group-hover:bg-primary-950"
    >
      <svg
        id="toc-arrow-icon"
        class="w-5 h-5 text-primary-600 dark:text-primary-400 transition-transform duration-300 transform rotate-0"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path stroke-linecap="round" stroke-linejoin="round" d="M19 9l-7 7-7-7"></path>
      </svg>
    </button>
  </div>

  <nav aria-label={t('blog.tableOfContents')} class="mt-6">
    <ul id="toc-list" class="space-y-3 hidden">
      {headings.map((heading) => (
        <li>
          <a
            href={`#${heading.slug}`}
            class={`block text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition-all duration-200 depth-${heading.depth}`}
            style={{ paddingLeft: `${(heading.depth - 2) * 1.25}rem` }}
          >
            {heading.text}
          </a>
        </li>
      ))}
    </ul>
  </nav>
</div>

<style is:global>
  .toc-container ul {
    list-style: none;
    padding: 0;
  }

  .toc-container li {
    margin-bottom: 0.25rem;
  }

  .toc-container a {
    display: block;
    padding: 0.25rem 0;
    border-left: 2px solid transparent;
  }

  .toc-container a:hover {
    border-left-color: currentColor;
  }

  .toc-container a.depth-2 {
    font-weight: 600;
    font-size: 1rem;
  }

  .toc-container a.depth-3 {
    font-weight: 500;
    font-size: 0.95rem;
  }

  .toc-container a.depth-4 {
    font-weight: 400;
    font-size: 0.9rem;
  }

  .rotate-180 {
    transform: rotate(180deg);
  }

  @media (max-width: 768px) {
    .toc-container {
      margin-left: 0;
      margin-right: 0;
      border-radius: 0;
      box-shadow: none;
    }
  }
</style>

<script>
  const initTocToggle = () => {
    const toggleWrapper = document.getElementById('toc-toggle-wrapper');
    const tocList = document.getElementById('toc-list');
    const arrowIcon = document.getElementById('toc-arrow-icon');

    if (!toggleWrapper || !tocList || !arrowIcon) {
      return;
    }

    // Prevent re-initializing the script on the same element
    if (toggleWrapper.dataset.tocInitialized) {
      return;
    }
    toggleWrapper.dataset.tocInitialized = 'true';

    // Set initial ARIA state based on the visibility of the content
    const isInitiallyExpanded = !tocList.classList.contains('hidden');
    toggleWrapper.setAttribute('aria-expanded', isInitiallyExpanded.toString());
    arrowIcon.classList.toggle('rotate-180', isInitiallyExpanded);

    toggleWrapper.addEventListener('click', () => {
      const isExpanded = toggleWrapper.getAttribute('aria-expanded') === 'true';
      const newIsExpanded = !isExpanded;

      toggleWrapper.setAttribute('aria-expanded', newIsExpanded.toString());
      tocList.classList.toggle('hidden', !newIsExpanded);
      arrowIcon.classList.toggle('rotate-180', newIsExpanded);
    });
  };

  // Run the script on initial page load and after Astro's client-side navigation
  document.addEventListener('astro:page-load', initTocToggle);
</script>
