---
import { useTranslations } from '@/i18n/utils';
import type { LanguageKey } from '@/i18n/types';

interface Heading {
  depth: number;
  slug: string;
  text: string;
}

interface Props {
  headings: Heading[];
  lang: LanguageKey;
}

const { headings, lang } = Astro.props;
const t = useTranslations(lang);
---

<div class="toc-container bg-gray-50 dark:bg-gray-800 p-6 rounded-lg shadow-md mb-8">
  <div class="flex items-center justify-between cursor-pointer" id="toc-toggle-wrapper">
    <div class="flex items-center gap-2">
      <h2 class="text-xl font-bold text-gray-900 dark:text-white">
        {t('blog.tableOfContents')}
      </h2>
    </div>
    <div class="flex items-center justify-center w-8 h-8 border border-primary-600 dark:border-primary-400 rounded-full">
      <svg
        id="toc-arrow-icon"
        class="w-5 h-5 text-primary-600 dark:text-primary-400 transition-transform duration-300 transform rotate-0"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path stroke-linecap="round" stroke-linejoin="round" d="M19 9l-7 7-7-7"></path>
      </svg>
    </div>
  </div>

  <nav aria-label={t('blog.tableOfContents')} class="mt-4">
    <ul id="toc-list" class="space-y-2 hidden">
      {headings.map((heading) => (
        <li>
          <a
            href={`#${heading.slug}`}
            class={`block text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition-colors duration-200 depth-${heading.depth}`}
            style={{ paddingLeft: `${(heading.depth - 2) * 1}rem` }}
          >
            {heading.text}
          </a>
        </li>
      ))}
    </ul>
  </nav>
</div>

<style is:global>
  .toc-container ul {
    list-style: none;
    padding: 0;
  }

  .toc-container li {
    margin-bottom: 0.5rem;
  }

  .toc-container a {
    display: block;
    padding: 0.25rem 0;
  }

  .toc-container a.depth-2 {
    font-weight: 600;
  }

  .toc-container a.depth-3 {
    font-weight: 500;
  }

  .toc-container a.depth-4 {
    font-weight: 400;
  }

  @media (max-width: 768px) {
    .toc-container {
      margin-left: 0;
      margin-right: 0;
      border-radius: 0;
      box-shadow: none;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const toggleWrapper = document.getElementById('toc-toggle-wrapper');
    const tocList = document.getElementById('toc-list');
    const arrowIcon = document.getElementById('toc-arrow-icon');

    if (toggleWrapper && tocList && arrowIcon) {
      let isExpanded = false;

      toggleWrapper.addEventListener('click', () => {
        isExpanded = !isExpanded;

        tocList.classList.toggle('hidden', !isExpanded);
        arrowIcon.classList.toggle('rotate-180', isExpanded);
        toggleWrapper.setAttribute('aria-expanded', isExpanded.toString());
      });
    }
  });
</script>
