---
import { getLangFromUrl, useTranslations } from "@/i18n/utils";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<div class="relative max-w-md w-full">
  <div class="relative">
    <div
      class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
      <svg
        class="h-5 w-5 text-gray-400"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24">
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
        ></path>
      </svg>
    </div>
    <input
      type="search"
      id="search-input"
      placeholder={t("search.placeholder")}
      class="block w-full pl-10 pr-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md leading-5 bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary-500 dark:focus:ring-primary-400 focus:border-transparent transition-colors duration-200"
      autocomplete="off"
      spellcheck="false"
    />
  </div>

  <!-- Search Results Dropdown -->
  <div
    id="search-results"
    class="absolute top-full left-0 right-0 mt-1 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-600 rounded-md shadow-lg z-50 max-h-96 overflow-y-auto hidden">
    <div
      id="search-results-content"
      class="py-2">
      <!-- Results will be populated by JavaScript -->
    </div>
  </div>
</div>

<script>
  import { searchPosts } from "@/utils/search";

  document.addEventListener("DOMContentLoaded", () => {
    const searchInput = document.getElementById(
      "search-input"
    ) as HTMLInputElement;
    const searchResults = document.getElementById("search-results");
    const searchResultsContent = document.getElementById(
      "search-results-content"
    );

    if (!searchInput || !searchResults || !searchResultsContent) return;

    let searchTimeout: number;

    // Handle search input
    searchInput.addEventListener("input", (e) => {
      const query = (e.target as HTMLInputElement).value.trim();

      // Clear previous timeout
      clearTimeout(searchTimeout);

      if (query.length < 2) {
        searchResults.classList.add("hidden");
        return;
      }

      // Debounce search
      searchTimeout = window.setTimeout(() => {
        performSearch(query);
      }, 300);
    });

    // Perform search and display results
    async function performSearch(query: string) {
      try {
        const results = await searchPosts(query);
        displayResults(results, query);
      } catch (error) {
        console.error("Search error:", error);
        displayNoResults();
      }
    }

    // Display search results
    function displayResults(results: any[], query: string) {
      if (results.length === 0) {
        displayNoResults();
        return;
      }

      const resultHtml = results
        .map(
          (result) => `
        <a
          href="${result.url}"
          class="block px-4 py-3 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors duration-200"
        >
          <div class="flex items-start space-x-3">
            <div class="flex-1 min-w-0">
              <h3 class="text-sm font-medium text-gray-900 dark:text-gray-100 truncate">
                ${highlightText(result.title, query)}
              </h3>
              <p class="text-xs text-gray-500 dark:text-gray-400 mt-1 line-clamp-2">
                ${highlightText(result.description, query)}
              </p>
              <div class="flex items-center mt-2 space-x-2">
                <span class="text-xs text-gray-400 dark:text-gray-500">
                  ${result.pubDate}
                </span>
                ${
                  result.tags
                    ? result.tags
                        .map(
                          (tag: string) => `
                  <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-primary-100 text-primary-800 dark:bg-primary-900 dark:text-primary-200">
                    ${tag}
                  </span>
                `
                        )
                        .join("")
                    : ""
                }
              </div>
            </div>
          </div>
        </a>
      `
        )
        .join("");

      if (searchResultsContent) searchResultsContent.innerHTML = resultHtml;
      if (searchResults) searchResults.classList.remove("hidden");
    }

    // Display no results message
    function displayNoResults() {
      const lang = document.documentElement.lang || "en";
      const messages = {
        en: "No articles found.",
        es: "No se encontraron artículos.",
        ja: "記事が見つかりません。",
      };

      if (searchResultsContent) {
        searchResultsContent.innerHTML = `
          <div class="px-4 py-3 text-sm text-gray-500 dark:text-gray-400 text-center">
            ${messages[lang as keyof typeof messages] || messages.en}
          </div>
        `;
      }
      if (searchResults) searchResults.classList.remove("hidden");
    }

    // Highlight search terms in text
    function highlightText(text: string, query: string): string {
      if (!query) return text;

      const regex = new RegExp(
        `(${query.replace(/[.*+?^${}()|[\]\\]/g, "\\$&")})`,
        "gi"
      );
      return text.replace(
        regex,
        '<mark class="bg-yellow-200 dark:bg-yellow-800">$1</mark>'
      );
    }

    // Hide results when clicking outside
    document.addEventListener("click", (e) => {
      if (
        !searchInput.contains(e.target as Node) &&
        !searchResults.contains(e.target as Node)
      ) {
        searchResults.classList.add("hidden");
      }
    });

    // Handle keyboard navigation
    searchInput.addEventListener("keydown", (e) => {
      if (e.key === "Escape") {
        searchResults.classList.add("hidden");
        searchInput.blur();
      }
    });
  });
</script>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
