---
import { getLangFromUrl, useTranslations } from '@/i18n/utils';
import type { LanguageKey } from '@/i18n/types';

const lang = getLangFromUrl(Astro.url) as LanguageKey;
const t = useTranslations(lang);
---

<button
  id="theme-toggle"
  class="p-0 mx-1 md:ml-1 rounded-md text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 hover:bg-gray-100 dark:hover:bg-gray-800 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2"
  aria-label={t('theme.toggle')}
  title={t('theme.toggle')}
>
  {/* Sun icon (visible in dark mode) */}
  <svg
    id="theme-toggle-light-icon"
    class="w-5 h-5 hidden dark:block"
    fill="currentColor"
    viewBox="0 0 20 20"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      fill-rule="evenodd"
      d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z"
      clip-rule="evenodd"
    />
  </svg>

  {/* Moon icon (visible in light mode) */}
  <svg
    id="theme-toggle-dark-icon"
    class="w-5 h-5 block dark:hidden"
    fill="currentColor"
    viewBox="0 0 20 20"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"
    />
  </svg>
</button>

<script>
  document.addEventListener('astro:page-load', () => {
    const themeToggle = document.getElementById('theme-toggle');
    const lightIcon = document.getElementById('theme-toggle-light-icon');
    const darkIcon = document.getElementById('theme-toggle-dark-icon');

    if (!themeToggle || !lightIcon || !darkIcon) return;

    // Function to update icons based on current theme
    function updateIcons() {
      const isDark = document.documentElement.classList.contains('dark');

      if (isDark) {
        lightIcon!.classList.remove('hidden');
        lightIcon!.classList.add('block');
        darkIcon!.classList.remove('block');
        darkIcon!.classList.add('hidden');
      } else {
        lightIcon!.classList.remove('block');
        lightIcon!.classList.add('hidden');
        darkIcon!.classList.remove('hidden');
        darkIcon!.classList.add('block');
      }
    }

    // Initial icon update
    updateIcons();

    // Theme toggle functionality
    themeToggle.addEventListener('click', () => {
      const isDark = document.documentElement.classList.contains('dark');
      const newTheme = isDark ? 'light' : 'dark';

      // Toggle theme
      document.documentElement.classList.toggle('dark');

      // Save preference
      if (typeof localStorage !== 'undefined') {
        localStorage.setItem('theme', newTheme);
      }

      // Update icons
      updateIcons();

      // Dispatch custom event for other components
      window.dispatchEvent(new CustomEvent('theme-changed', {
        detail: { theme: newTheme }
      }));
    });

    // Listen for theme changes from other sources
    window.addEventListener('theme-changed', updateIcons);

    // System theme preference change listener
    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
      if (!localStorage.getItem('theme')) {
        document.documentElement.classList[e.matches ? 'add' : 'remove']('dark');
        updateIcons();
      }
    });
  });
</script>
