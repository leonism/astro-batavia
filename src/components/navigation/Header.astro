---
import { getLangFromUrl } from "@/i18n/utils";
import type { LanguageKey } from "@/i18n/types";

import HeaderLogo from "./HeaderLogo.astro";
import HeaderNavLinks from "./HeaderNavLinks.astro";
import HeaderUtilities from "./HeaderUtilities.astro";
const lang = getLangFromUrl(Astro.url) as LanguageKey;
const currentPath = Astro.url.pathname;
---

<header
  class="fixed top-0 z-50 w-full bg-white/50 dark:bg-slate-900/80 backdrop-blur-xl border-b border-slate-200/50 dark:border-slate-700/50"
  aria-label="Main navigation">
  <nav class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between items-center h-16">
      <HeaderLogo lang={lang} />
      <div class="hidden md:flex items-center gap-5">
        <HeaderNavLinks
          lang={lang}
          currentPath={currentPath}
          variant="desktop"
        />
      </div>
      <div class="flex items-center">
        <button id="open-search-overlay" class="text-gray-600 mr-2 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition-colors duration-200" aria-label="Open search">
          <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
          </svg>
        </button>
        <HeaderUtilities />
      </div>
    </div>
  </nav>
</header>
<div id="mobile-nav-overlay" class="mobile-nav-overlay hidden md:hidden"></div>
<div
  id="mobile-menu"
  class="fixed top-0 right-0 h-full w-80 bg-white dark:bg-slate-900 z-50 shadow-lg p-6 hidden md:hidden"
  aria-expanded="false"
  aria-label="Mobile menu">
  <div class="flex justify-end mb-4">
    <button id="close-mobile-menu" class="text-gray-600 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition-colors duration-200" aria-label="Close mobile menu">
      <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
      </svg>
    </button>
  </div>
  <div class="flex flex-col gap-4">
    <HeaderNavLinks
      lang={lang}
      currentPath={currentPath}
      variant="mobile"
    />
  </div>
</div>

<script is:inline>
  document.addEventListener("astro:page-load", () => {
    const mobileMenuButton = document.getElementById("mobile-menu-button");
    const mobileMenu = document.getElementById("mobile-menu");
    const closeMobileMenuButton = document.getElementById("close-mobile-menu");
    const mobileNavOverlay = document.getElementById("mobile-nav-overlay");

    const openMobileMenu = () => {
      if (!mobileMenu || !mobileNavOverlay) return;
      mobileMenu.classList.remove("hidden");
      mobileNavOverlay.classList.remove("hidden");
      document.body.classList.add("mobile-nav-open");
      mobileNavOverlay.classList.add("is-active");
      mobileMenu.classList.add("is-active");
      mobileMenu.setAttribute("aria-expanded", "true");
    };

    const closeMobileMenu = () => {
      if (!mobileMenu || !mobileNavOverlay) return;
      document.body.classList.remove("mobile-nav-open");
      mobileNavOverlay.classList.remove("is-active");
      mobileMenu.classList.remove("is-active");
      mobileMenu.setAttribute("aria-expanded", "false");
      // Add hidden class after transition for better UX
      setTimeout(() => {
        mobileMenu.classList.add("hidden");
        mobileNavOverlay.classList.add("hidden");
      }, 300); // Match CSS transition duration
    };

    if (mobileMenuButton) {
      mobileMenuButton.addEventListener("click", openMobileMenu);
    }

    if (closeMobileMenuButton) {
      closeMobileMenuButton.addEventListener("click", closeMobileMenu);
    }

    if (mobileNavOverlay) {
      mobileNavOverlay.addEventListener("click", closeMobileMenu);
    }

    // Close menu on escape key press
    document.addEventListener("keydown", (event) => {
      if (event.key === "Escape" && mobileMenu && mobileMenu.classList.contains("is-active")) {
        closeMobileMenu();
      }
    });

    // Close menu when clicking outside of it
    document.addEventListener("click", (event) => {
      if (mobileMenu && mobileNavOverlay && mobileMenuButton && mobileMenu.classList.contains("is-active")) {
        const target = event.target;
        if (!(target instanceof Node)) return;
        if (!mobileMenu.contains(target) && !mobileMenuButton.contains(target)) {
          closeMobileMenu();
        }
      }
    });
  });
</script>
