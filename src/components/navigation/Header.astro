---
import { getLangFromUrl } from "@/i18n/utils";
import type { LanguageKey } from "@/i18n/types";

import HeaderLogo from "./HeaderLogo.astro";
import HeaderNavLinks from "./HeaderNavLinks.astro";
import HeaderUtilities from "./HeaderUtilities.astro";
const lang = getLangFromUrl(Astro.url) as LanguageKey;
const currentPath = Astro.url.pathname;
---

<header
  class="fixed top-0 z-50 w-full bg-white/50 dark:bg-slate-900/80 backdrop-blur-xl border-b border-slate-200/50 dark:border-slate-700/50"
  aria-label="Main navigation">
  <nav class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between items-center h-16">
      <HeaderLogo lang={lang} />
      <div class="hidden md:flex items-center gap-5">
        <HeaderNavLinks
          lang={lang}
          currentPath={currentPath}
          variant="desktop"
        />
      </div>
      <div class="flex items-center ml-0">
        <button id="open-search-overlay" class="text-gray-600 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition-colors duration-200" aria-label="Open search">
          <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
          </svg>
        </button>
        <HeaderUtilities />
      </div>
    </div>
    <div
      id="mobile-menu"
      class="md:hidden hidden pb-4"
      aria-expanded="false"
      aria-label="Mobile menu">
      <div class="flex flex-col gap-2">
        <HeaderNavLinks
          lang={lang}
          currentPath={currentPath}
          variant="mobile"
        />

      </div>
    </div>
  </nav>
</header>

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    const mobileMenuButton = document.getElementById("mobile-menu-button");
    const mobileMenu = document.getElementById("mobile-menu");

    const toggleMobileMenu = () => {
      if (!mobileMenu) return;

      const isExpanded = mobileMenu.getAttribute("aria-expanded") === "true";
      mobileMenu.classList.toggle("hidden");
      mobileMenu.setAttribute("aria-expanded", String(!isExpanded));
    };

    const closeMobileMenu = (event) => {
      if (!mobileMenu || !mobileMenuButton) return;

      const target = event.target;
      const isClickInside =
        mobileMenuButton.contains(target) || mobileMenu.contains(target);

      if (!isClickInside) {
        mobileMenu.classList.add("hidden");
        mobileMenu.setAttribute("aria-expanded", "false");
      }
    };

    if (mobileMenuButton && mobileMenu) {
      mobileMenuButton.addEventListener("click", toggleMobileMenu);
      document.addEventListener("click", closeMobileMenu);

      // Prevent clicks inside the mobile menu from closing it immediately
      mobileMenu.addEventListener("click", (event) => {
        if (event.target.tagName === "A") {
          event.stopPropagation();
        }
      });
    }

    return () => {
      if (mobileMenuButton) {
        mobileMenuButton.removeEventListener("click", toggleMobileMenu);
      }
      document.removeEventListener("click", closeMobileMenu);
      // No need to remove the mobileMenu click listener as it's tied to the element's lifecycle
    };
  });
</script>
