---
export interface Props {
  title: string;
  description: string;
  image?: string;
  noindex?: boolean;
  canonical?: string;
  lang?: string;
  type?: "website" | "article";
  publishedTime?: string;
  modifiedTime?: string;
  author?: string;
  tags?: string[];
}

const {
  title,
  description,
  image,
  noindex = false,
  canonical,
  lang = "en",
  type = "website",
  publishedTime,
  modifiedTime,
  author,
  tags = [],
} = Astro.props;

const siteTitle = "Astro Batavia";
const fullTitle = title === siteTitle ? title : `${title} | ${siteTitle}`;
const siteUrl = Astro.site?.href || "https://your-blog.com";
const imageUrl = image
  ? new URL(image, siteUrl).href
  : `${siteUrl}/images/og-default.jpg`;
const canonicalUrl = canonical || Astro.url.href;

// Language mappings
const hreflangMap = {
  en: "en-US",
  es: "es-ES",
  ja: "ja-JP",
};

// Get alternate language URLs
const getAlternateUrls = () => {
  const currentPath = Astro.url.pathname;
  const pathWithoutLang = currentPath.replace(/^\/(en|es|ja)/, "") || "/";

  return {
    en: pathWithoutLang === "/" ? siteUrl : `${siteUrl}${pathWithoutLang}`,
    es: `${siteUrl}/es${pathWithoutLang}`,
    ja: `${siteUrl}/ja${pathWithoutLang}`,
  };
};

const alternateUrls = getAlternateUrls();
---

<!-- Basic Meta Tags -->
<title>{fullTitle}</title>
<meta
  name="description"
  content={description}
/>
{
  noindex && (
    <meta
      name="robots"
      content="noindex, nofollow"
    />
  )
}
{
  canonical && (
    <link
      rel="canonical"
      href={canonicalUrl}
    />
  )
}

<!-- Open Graph -->
<meta
  property="og:type"
  content={type}
/>
<meta
  property="og:title"
  content={fullTitle}
/>
<meta
  property="og:description"
  content={description}
/>
<meta
  property="og:image"
  content={imageUrl}
/>
<meta
  property="og:url"
  content={canonicalUrl}
/>
<meta
  property="og:site_name"
  content={siteTitle}
/>
<meta
  property="og:locale"
  content={hreflangMap[lang as keyof typeof hreflangMap]}
/>

{
  type === "article" && (
    <>
      {publishedTime && (
        <meta
          property="article:published_time"
          content={publishedTime}
        />
      )}
      {modifiedTime && (
        <meta
          property="article:modified_time"
          content={modifiedTime}
        />
      )}
      {author && (
        <meta
          property="article:author"
          content={author}
        />
      )}
      {tags.map((tag) => (
        <meta
          property="article:tag"
          content={tag}
        />
      ))}
    </>
  )
}

<!-- Twitter Card -->
<meta
  name="twitter:card"
  content="summary_large_image"
/>
<meta
  name="twitter:title"
  content={fullTitle}
/>
<meta
  name="twitter:description"
  content={description}
/>
<meta
  name="twitter:image"
  content={imageUrl}
/>

<!-- Hreflang Tags -->
{
  Object.entries(alternateUrls).map(([langCode, url]) => (
    <link
      rel="alternate"
      hreflang={hreflangMap[langCode as keyof typeof hreflangMap]}
      href={url}
    />
  ))
}
<link
  rel="alternate"
  hreflang="x-default"
  href={alternateUrls.en}
/>

<!-- Additional Meta Tags -->
<meta
  name="theme-color"
  content="#3b82f6"
/>
<meta
  name="msapplication-TileColor"
  content="#3b82f6"
/>
<meta name="apple-mobile-web-app-status-bar-style" content="black"
  name="apple-mobile-web-app-capable"
  content="yes"
/>
<meta name="mobile-web-app-capable" content="yes" />
<meta
  name="apple-mobile-web-app-status-bar-style"
  content="black"
/>

<!-- Favicon -->
<link
  rel="icon"
  type="image/svg+xml"
  href="/favicon.svg" />
<link
  rel="icon"
  type="image/png"
  sizes="32x32"
  href="/favicon-32x32.png"
/>
<link
  rel="icon"
  type="image/png"
  sizes="16x16"
  href="/favicon-16x16.png" />
<link
  rel="apple-touch-icon"
  sizes="180x180"
  href="/apple-touch-icon.png" />
<link
  rel="manifest"
  href="/site.webmanifest" />
