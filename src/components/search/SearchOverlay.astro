---
import { getLangFromUrl } from "@/i18n/utils";
import type { LanguageKey } from "@/i18n/types";
import type { SearchResult } from '../../features/search/EnterpriseSearchEngine.js';
---

<section
  id="search-overlay"
  class="fixed inset-0 bg-white/95 dark:bg-slate-900/95 backdrop-blur-xl z-[100] p-4 hidden"
  aria-labelledby="search-overlay-title"
  role="search"
  aria-hidden="true"
>
  <h2 id="search-overlay-title" class="sr-only">Search</h2>
  <button
    id="close-search-overlay"
    class="absolute top-4 right-4 text-gray-600 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition-colors duration-200"
    aria-label="Close search"
  >
    <svg
      class="h-8 w-8"
      fill="none"
      stroke="currentColor"
      viewBox="0 0 24 24"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M6 18L18 6M6 6l12 12"
      ></path>
    </svg>
  </button>

  <div class="w-full max-w-3xl">
            <div class="max-w-4xl mx-auto">
          <input
            type="text"
            id="search-input"
            placeholder="Search articles, tags, authors..."
            class="block w-full px-5 py-3 text-lg border-2 border-gray-200 dark:border-gray-600 rounded-xl leading-6 bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-4 focus:ring-primary-500/20 focus:border-primary-500 dark:focus:border-primary-400 transition-all duration-300 shadow-lg hover:shadow-xl"
          />
        </div>
    <div id="search-results-container" class="mt-8">
      <!-- Search results will be dynamically inserted here -->
    </div>
  </div>
</section>

<script type="module">
  document.addEventListener("DOMContentLoaded", async () => {
    const openSearchOverlayButton = document.getElementById(
      "open-search-overlay"
    );
    const closeSearchOverlayButton = document.getElementById(
      "close-search-overlay"
    );
    const searchOverlay = document.getElementById("search-overlay");
    const searchInput = document.getElementById("search-input");
    const searchResultsContainer = document.getElementById(
      "search-results-container"
    );

    if (!searchInput || !searchResultsContainer || !searchOverlay || !closeSearchOverlayButton) {
      console.error("Search overlay elements not found.");
      return;
    }

    const searchEngine = new EnterpriseSearchEngine();
    const searchIntegration = new SearchIntegration(); // Although not directly used here, it's good to have it initialized if needed elsewhere.

    let allDocuments = [];

    // Fetch and index documents
    try {
      const response = await fetch('/api/search-index');
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      allDocuments = await response.json();
      searchEngine.indexDocuments(allDocuments);
      console.log(`Search engine initialized with ${allDocuments.length} documents for overlay.`);
    } catch (error) {
      console.error("Failed to load search index for overlay:", error);
      // Optionally display an error message in the overlay
      return;
    }

    const toggleSearchOverlay = (show) => {
      const searchOverlay = document.getElementById("search-overlay");
      if (!searchOverlay) return;
      if (show) {
        searchOverlay.classList.remove("hidden");
        searchOverlay.setAttribute("aria-hidden", "false");
        const searchInput = searchOverlay.querySelector("#search-input");
        if (searchInput instanceof HTMLInputElement) {
          searchInput.focus();
        }
      } else {
        searchOverlay.classList.add("hidden");
        searchOverlay.setAttribute("aria-hidden", "true");
        const searchInput = searchOverlay.querySelector("#search-input");
        if (searchInput instanceof HTMLInputElement) {
          searchInput.value = ""; // Clear search input on close
        }
        const searchResultsContainer = searchOverlay.querySelector("#search-results-container");
        if (searchResultsContainer) {
          searchResultsContainer.innerHTML = ""; // Clear results on close
        }
      }
    };

    const performSearch = () => {
      const query = searchInput.value;
      const results = searchEngine.search(query);
      displayResults(results, query);
    };

    const displayResults = (results, query) => {
      searchResultsContainer.innerHTML = '';
      if (results.length === 0 && query.length > 0) {
        searchResultsContainer.innerHTML = `
          <p class="text-center text-gray-600 dark:text-gray-400 text-lg">No results found for "${query}".</p>
        `;
      } else if (results.length > 0) {
        searchResultsContainer.innerHTML = `
          <ul class="space-y-4">
            ${results
              .map(
                (result) => `
                <li>
                  <a href="/${result.lang}/blog/${result.slug}" class="block p-4 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors duration-200">
                    <h3 class="text-xl font-semibold text-gray-900 dark:text-gray-100">${result.highlightedTitle || result.title}</h3>
                    <p class="text-gray-600 dark:text-gray-400">${result.highlightedDescription || result.description}</p>
                  </a>
                </li>
              `
              )
              .join("")}
          </ul>
        `;
      } else {
        searchResultsContainer.innerHTML = ""; // Clear results if query is empty
      }
    };

    openSearchOverlayButton?.addEventListener("click", () =>
      toggleSearchOverlay(true)
    );
    closeSearchOverlayButton?.addEventListener("click", () =>
      toggleSearchOverlay(false)
    );

    // Close overlay when pressing Escape key
    document.addEventListener("keydown", (event) => {
      if (event.key === "Escape" && !searchOverlay.classList.contains("hidden")) {
        toggleSearchOverlay(false);
      }
    });

    // Close overlay when clicking outside the content area
    searchOverlay.addEventListener("click", (event) => {
      const contentArea = searchOverlay.querySelector(".w-full.max-w-3xl");
      if (contentArea && !contentArea.contains(event.target as Node)) {
        toggleSearchOverlay(false);
      }
    });

    searchInput.addEventListener('input', performSearch);
  });
</script>

<style>
  #search-overlay {
    animation: fadeIn 0.3s ease-out forwards;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
</style>
