---
import { getCollection, type CollectionEntry } from 'astro:content';
import BlogCard from '@/components/blog/BlogCard.astro';

import { getCollection, type CollectionEntry } from 'astro:content';

export async function get({ request }: { request: Request }) {
  try {
    const url = new URL(request.url);
    const page = parseInt(url.searchParams.get('page') || '1', 10);
    const lang = url.searchParams.get('lang') || 'en';
    const tag = url.searchParams.get('tag');

    const allPostsUnsorted = await getCollection('blog', ({ id, data }) => {
      const isLangMatch = lang === 'en' ? !id.includes('/') : id.startsWith(`${lang}/`);
      const isTagMatch = tag ? data.tags?.includes(tag) : true;
      return isLangMatch && isTagMatch && !data.draft;
    });

    const sortedPosts = allPostsUnsorted.sort(
      (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
    );

    const postsPerPage = 9;
    const startIndex = (page - 1) * postsPerPage;
    const postsToDisplay = sortedPosts.slice(startIndex, startIndex + postsPerPage);

    const postsData = postsToDisplay.map(post => ({
      url: `/${post.slug.replace(/^(en\/)?/, '')}`,
      title: post.data.title,
      description: post.data.description,
      pubDate: post.data.pubDate.toLocaleDateString(lang, { year: 'numeric', month: 'long', day: 'numeric' }),
      heroImage: post.data.heroImage,
      tags: post.data.tags,
      author: post.data.author,
      readingTime: post.data.readingTime,
    }));

    return new Response(JSON.stringify(postsData), {
      headers: { 'Content-Type': 'application/json' },
    });
  } catch (error) {
    console.error('Error in get-posts API:', error);
    return new Response(JSON.stringify({ error: 'Internal Server Error' }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' },
    });
  }
}
