export const prerender = true;
---
import { type CollectionEntry, getCollection } from 'astro:content';
import BlogPost from '@/layouts/BlogPost.astro';
import { isValidLanguage } from '@/i18n/utils';

interface PathParams {
  lang: string;
  slug: string;
}

interface StaticPath {
  params: PathParams;
  props: CollectionEntry<'blog'>;
}

export async function getStaticPaths() {
  const allPosts = await getCollection('blog', ({ data }: { data: CollectionEntry<'blog'>['data'] }) => !data.draft);

  const paths: StaticPath[] = [];

  // Generate paths for all languages
  allPosts.forEach((post: CollectionEntry<'blog'>) => {
    const parts = post.id.split('/');
    const lang = parts[0];
    const slugPart = parts.slice(1).join('/');

    // Remove the file extension (.mdx or .md) from the slug part
    const finalSlug = slugPart.replace(/\.(mdx?)$/, '');

    paths.push({
      params: {
        lang: lang,
        slug: finalSlug // Use the carefully constructed slug
      },
      props: post,
    });
  });

  return paths;
}

type Props = CollectionEntry<'blog_en' | 'blog_es' | 'blog_ja'>;

const { lang } = Astro.params;

// Validate language
if (!lang || !isValidLanguage(lang)) {
  return Astro.redirect('/404');
}

const post = Astro.props;
const { Content } = await post.render();
---

<BlogPost {...post.data} slug={post.slug}>
  <Content />
</BlogPost>
