---
import { type CollectionEntry, getCollection } from 'astro:content';
import BlogPost from '@/layouts/BlogPost.astro';
import { isValidLanguage } from '@/i18n/utils';

export async function getStaticPaths() {
  const allPosts = await getCollection('blog', ({ data }) => !data.draft);
  
  const paths = [];
  
  // Generate paths for Spanish posts
  const esPosts = allPosts.filter(post => post.id.startsWith('es/'));
  esPosts.forEach(post => {
    paths.push({
      params: { 
        lang: 'es',
        slug: post.slug.replace('es/', '')
      },
      props: post,
    });
  });
  
  // Generate paths for Japanese posts
  const jaPosts = allPosts.filter(post => post.id.startsWith('ja/'));
  jaPosts.forEach(post => {
    paths.push({
      params: { 
        lang: 'ja',
        slug: post.slug.replace('ja/', '')
      },
      props: post,
    });
  });
  
  return paths;
}

type Props = CollectionEntry<'blog'>;

const { lang } = Astro.params;

// Validate language
if (!lang || !isValidLanguage(lang)) {
  return Astro.redirect('/404');
}

const post = Astro.props;
const { Content } = await post.render();
---

<BlogPost {...post.data} slug={post.slug}>
  <Content />
</BlogPost>
