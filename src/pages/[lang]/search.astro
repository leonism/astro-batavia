---
import { getCollection, type CollectionEntry } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import { useTranslations } from "../../i18n/utils";

export async function getStaticPaths() {
  return [
    { params: { lang: "en" } },
    { params: { lang: "es" } },
    { params: { lang: "ja" } }
  ];
}

const { lang } = Astro.params as { lang: "en" | "es" | "ja" };
const t = useTranslations(lang);

// Get all blog posts
const allPosts = await getCollection("blog");

// Filter posts by language
const posts = allPosts
  .filter((post: CollectionEntry<"blog">) => post.slug.startsWith(lang))
  .sort((a: CollectionEntry<"blog">, b: CollectionEntry<"blog">) => new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime());

// Get all unique tags from posts
const allTags = [...new Set(posts.flatMap((post: CollectionEntry<"blog">) => post.data.tags || []))];
---

<Layout
  title={`${t("nav.search")} | Astro Batavia`}
  description="Search through our collection of articles and find exactly what you're looking for"
  lang={lang}>
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <!-- Header -->
    <div class="text-center mb-12">
      <h1 class="text-4xl sm:text-5xl font-bold text-gray-900 dark:text-gray-100 mb-4">
        {t("nav.search")}
      </h1>
      <p class="text-xl text-gray-600 dark:text-gray-300 max-w-3xl mx-auto">
        {
          lang === "es"
            ? "Encuentra artículos, temas e ideas en toda nuestra colección de blog."
            : lang === "ja"
              ? "ブログコレクション全体から記事、トピック、洞察を見つけてください。"
              : "Find articles, topics, and insights across our entire blog collection."
        }
      </p>
    </div>

    <!-- Search Box -->
    <div class="max-w-2xl mx-auto mb-12">
      <div class="relative">
        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
          <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
          </svg>
        </div>
        <input
          type="search"
          id="main-search-input"
          placeholder={
            lang === "es"
              ? "Buscar artículos..."
              : lang === "ja"
                ? "記事を検索..."
                : "Search articles..."
          }
          class="block w-full pl-10 pr-3 py-3 border border-gray-300 dark:border-gray-600 rounded-lg leading-5 bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary-500 dark:focus:ring-primary-400 focus:border-transparent transition-colors duration-200 text-lg"
          autocomplete="off"
          spellcheck="false"
        />
      </div>
    </div>

    <!-- Filters -->
    <div class="flex flex-col sm:flex-row gap-4 mb-8">
      <!-- Tag Filters -->
      <div class="flex-1">
        <h3 class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
          {
            lang === "es"
              ? "Filtrar por tema:"
              : lang === "ja"
                ? "トピックでフィルター:"
                : "Filter by topic:"
          }
        </h3>
        <div class="flex flex-wrap gap-2">
          <button
            class="tag-filter active bg-primary-600 text-white px-3 py-1 rounded-full text-sm font-medium transition-colors duration-200"
            data-tag="all">
            {
              lang === "es"
                ? "Todos los temas"
                : lang === "ja"
                  ? "すべてのトピック"
                  : "All Topics"
            }
          </button>
          {allTags.map((tag) => (
            <button
              class="tag-filter border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 px-3 py-1 rounded-full text-sm font-medium hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors duration-200"
              data-tag={tag}>
              {tag}
            </button>
          ))}
        </div>
      </div>

      <!-- Sort Options -->
      <div class="sm:w-48">
        <label for="sort-select" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
          {
            lang === "es"
              ? "Ordenar por:"
              : lang === "ja"
                ? "並び替え:"
                : "Sort by:"
          }
        </label>
        <select
          id="sort-select"
          class="block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 focus:outline-none focus:ring-2 focus:ring-primary-500 dark:focus:ring-primary-400 focus:border-transparent">
          <option value="date-desc">
            {
              lang === "es"
                ? "Más reciente primero"
                : lang === "ja"
                  ? "新しい順"
                  : "Newest first"
            }
          </option>
          <option value="date-asc">
            {
              lang === "es"
                ? "Más antiguo primero"
                : lang === "ja"
                  ? "古い順"
                  : "Oldest first"
            }
          </option>
          <option value="title-asc">
            {
              lang === "es"
                ? "Título A-Z"
                : lang === "ja"
                  ? "タイトル A-Z"
                  : "Title A-Z"
            }
          </option>
          <option value="title-desc">
            {
              lang === "es"
                ? "Título Z-A"
                : lang === "ja"
                  ? "タイトル Z-A"
                  : "Title Z-A"
            }
          </option>
        </select>
      </div>
    </div>

    <!-- Search Status -->
    <div id="search-status" class="text-center text-gray-500 dark:text-gray-400 mb-6">
      {
        lang === "es"
          ? "Ingresa un término de búsqueda para encontrar artículos"
          : lang === "ja"
            ? "記事を見つけるために検索語を入力してください"
            : "Enter a search term to find articles"
      }
    </div>

    <!-- Results Container -->
    <div id="results-container" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
      {/* Results will be rendered here by client-side JavaScript */}
    </div>
  </div>
</Layout>

<!-- No Results State -->
<div
  id="no-results"
  class="hidden text-center py-12">
  <svg
    class="w-16 h-16 mx-auto text-gray-400 mb-4"
    fill="none"
    stroke="currentColor"
    viewBox="0 0 24 24">
    <path
      stroke-linecap="round"
      stroke-linejoin="round"
      stroke-width="2"
      d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
    ></path>
  </svg>
  <h3 class="text-lg font-medium text-gray-900 dark:text-gray-100 mb-2">
    {t("search.no-results")}
  </h3>
  <p class="text-gray-500 dark:text-gray-400 mb-4">
    {
      lang === "es"
        ? "Intenta ajustar tus términos de búsqueda o explora nuestros temas a continuación."
        : lang === "ja"
          ? "検索語を調整するか、以下のトピックを閲覧してください。"
          : "Try adjusting your search terms or browse our topics below."
    }
  </p>
  <button
    id="clear-search"
    class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-primary-600 dark:text-primary-400 bg-primary-50 dark:bg-primary-900/20 hover:bg-primary-100 dark:hover:bg-primary-900/30 transition-colors duration-200">
    {
      lang === "es"
        ? "Limpiar Búsqueda"
        : lang === "ja"
          ? "検索をクリア"
          : "Clear Search"
    }
  </button>
</div>

<script>
  document.addEventListener("astro:page-load", () => {
    const searchInput = document.getElementById(
      "main-search-input"
    ) as HTMLInputElement;
    const tagFilters = document.querySelectorAll(".tag-filter");
    const sortSelect = document.getElementById(
      "sort-select"
    ) as HTMLSelectElement;
    const resultsContainer = document.getElementById("results-container")!;
    const searchStatus = document.getElementById("search-status")!;
    const noResults = document.getElementById("no-results")!;
    const clearSearch = document.getElementById("clear-search");
    const currentLang = document.documentElement.lang;

    if (!searchInput) return;

    let currentApiResults: any[] = []; // To store results from API
    let displayedItems: any[] = []; // To store items currently displayed (after client-side tag/sort)

    let currentTag = "all";
    let currentSort = "date-desc";

    // Keyboard shortcut for search
    document.addEventListener("keydown", (e) => {
      if ((e.metaKey || e.ctrlKey) && e.key === "k") {
        e.preventDefault();
        searchInput.focus();
      }
    });

    // Search functionality
    function performSearch() {
      const query = searchInput.value.toLowerCase().trim();
      const filteredItems: Element[] = [];

      // Note: postItems should be replaced with actual DOM elements or data
      // For now, using empty array to fix the error
      const postItems: Element[] = [];
      postItems.forEach((item: Element) => {
        const title = item.getAttribute("data-title")?.toLowerCase() || "";
        const description =
          item.getAttribute("data-description")?.toLowerCase() || "";
        const tags = JSON.parse(item.getAttribute("data-tags") || "[]");

        // Check if matches search query
        const matchesQuery =
          !query ||
          title.includes(query) ||
          description.includes(query) ||
          tags.some((tag: string) => tag.toLowerCase().includes(query));

        // Check if matches selected tag
        const matchesTag = currentTag === "all" || tags.includes(currentTag);

        if (matchesQuery && matchesTag) {
          filteredItems.push(item);
          (item as HTMLElement).style.display = "block";
        } else {
          (item as HTMLElement).style.display = "none";
        }
      });

      // Sort results
      sortResults(filteredItems);

      // Update status
      updateSearchStatus(filteredItems.length, query);
    }

    // Sort results
    function sortResults(items: Element[]) {
      const sortedItems = Array.from(items).sort((a, b) => {
        const aTitle = a.getAttribute("data-title") || "";
        const bTitle = b.getAttribute("data-title") || "";
        const aDate = new Date(a.getAttribute("data-date") || "");
        const bDate = new Date(b.getAttribute("data-date") || "");

        switch (currentSort) {
          case "date-asc":
            return aDate.getTime() - bDate.getTime();
          case "title-asc":
            return aTitle.localeCompare(bTitle);
          case "title-desc":
            return bTitle.localeCompare(aTitle);
          case "date-desc":
          default:
            return bDate.getTime() - aDate.getTime();
        }
      });

      // Reorder DOM elements
      sortedItems.forEach((item) => {
        resultsContainer?.appendChild(item);
      });
    }

    // Update search status (localized messages)
    function updateSearchStatus(count: number, query: string) {
      const lang = document.documentElement.lang;
      const messages = {
        en: {
          found: (count: number, query: string) =>
            `Found ${count} article${count === 1 ? "" : "s"} matching "${query}"`,
          showing: (count: number) => `Showing all ${count} articles`,
          tagged: (count: number, tag: string) =>
            `Showing ${count} article${count === 1 ? "" : "s"} tagged with "${tag}"`,
        },
        es: {
          found: (count: number, query: string) =>
            `Se encontraron ${count} artículo${count === 1 ? "" : "s"} que coinciden con "${query}"`,
          showing: (count: number) => `Mostrando todos los ${count} artículos`,
          tagged: (count: number, tag: string) =>
            `Mostrando ${count} artículo${count === 1 ? "" : "s"} etiquetado${count === 1 ? "" : "s"} con "${tag}"`,
        },
        ja: {
          found: (count: number, query: string) =>
            `"${query}"に一致する${count}件の記事が見つかりました`,
          showing: (count: number) => `${count}件の記事をすべて表示`,
          tagged: (count: number, tag: string) =>
            `"${tag}"でタグ付けされた${count}件の記事を表示`,
        },
      };

      const langMessages =
        messages[lang as keyof typeof messages] || messages.en;

      if (query) {
        if (count === 0) {
          searchStatus!.style.display = "none";
          noResults!.style.display = "block";
        } else {
          searchStatus!.style.display = "block";
          noResults!.style.display = "none";
          searchStatus!.textContent = langMessages.found(count, query);
        }
      } else {
        searchStatus!.style.display = "block";
        noResults!.style.display = "none";
        if (currentTag === "all") {
          searchStatus!.textContent = langMessages.showing(count);
        } else {
          searchStatus!.textContent = langMessages.tagged(count, currentTag);
        }
      }
    }

    // Create debounce utility function
    function debounce<T extends (...args: any[]) => void>(
      func: T,
      wait: number
    ): (...args: Parameters<T>) => void {
      let timeout: ReturnType<typeof setTimeout>;
      return (...args: Parameters<T>) => {
        clearTimeout(timeout);
        timeout = setTimeout(() => func(...args), wait);
      };
    }

    function applyClientFiltersAndRender() {
      let filteredResults = [...currentApiResults];
      
      // Apply tag filter
      if (currentTag !== 'all') {
        filteredResults = filteredResults.filter(post => 
          post.data.tags && post.data.tags.includes(currentTag)
        );
      }
      
      // Apply sorting
      filteredResults.sort((a, b) => {
        switch (currentSort) {
          case 'date-asc':
            return new Date(a.data.pubDate).getTime() - new Date(b.data.pubDate).getTime();
          case 'title-asc':
            return a.data.title.localeCompare(b.data.title);
          case 'title-desc':
            return b.data.title.localeCompare(a.data.title);
          case 'date-desc':
          default:
            return new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime();
        }
      });
      
      displayedItems = filteredResults;
      renderResults();
    }
    
    function renderResults() {
      resultsContainer.innerHTML = '';
      
      displayedItems.forEach((post) => {
        const blogCard = document.createElement("div");
        blogCard.innerHTML = `
          <article class="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow duration-300">
            <a href="/${currentLang}/blog/${post.slug.replace(`${currentLang}/`, '')}" class="block">
              <div class="aspect-w-16 aspect-h-9">
                <img
                  src="${post.data.heroImage || '/placeholder.jpg'}"
                  alt="${post.data.title}"
                  class="w-full h-48 object-cover"
                  loading="lazy"
                />
              </div>
              <div class="p-6">
                <div class="flex items-center text-sm text-gray-500 dark:text-gray-400 mb-2">
                  <time datetime="${post.data.pubDate}">
                    ${new Date(post.data.pubDate).toLocaleDateString(currentLang === 'es' ? 'es-ES' : currentLang === 'ja' ? 'ja-JP' : 'en-US', {
                      year: 'numeric',
                      month: 'long',
                      day: 'numeric'
                    })}
                  </time>
                  <span class="mx-2">•</span>
                  <span>${post.data.readingTime || '5 min read'}</span>
                </div>
                <h3 class="text-xl font-semibold text-gray-900 dark:text-gray-100 mb-2 line-clamp-2">
                  ${post.data.title}
                </h3>
                <p class="text-gray-600 dark:text-gray-300 line-clamp-3 mb-4">
                  ${post.data.description || ''}
                </p>
                <div class="flex flex-wrap gap-2">
                  ${(post.data.tags || []).map((tag: string) => `
                    <span class="inline-block bg-primary-100 dark:bg-primary-900 text-primary-800 dark:text-primary-200 text-xs px-2 py-1 rounded-full">
                      ${tag}
                    </span>
                  `).join('')}
                </div>
              </div>
            </a>
          </article>
        `;
        resultsContainer.appendChild(blogCard);
      });
      
      updateSearchStatus(displayedItems.length, searchInput.value.trim());
    }

    const debouncedFetchAndDisplayResults = debounce(
      async () => {
        const query = searchInput.value.toLowerCase().trim();
        if (!query) {
          currentApiResults = [];
          applyClientFiltersAndRender();
          return;
        }

        try {
          const response = await fetch(`/api/search?q=${encodeURIComponent(query)}&lang=${currentLang}`);
          if (!response.ok) throw new Error('Search request failed');
          currentApiResults = await response.json();
          applyClientFiltersAndRender();
        } catch (error) {
          console.error('Search error:', error);
          currentApiResults = [];
        }
      },
      300
    );

    // Search input event
    searchInput.addEventListener("input", () => {
      debouncedFetchAndDisplayResults();
    });

    // Tag filter events
    tagFilters.forEach((filter) => {
      filter.addEventListener("click", () => {
        // Update active filter
        tagFilters.forEach((f) => {
          f.classList.remove("active", "bg-primary-600", "text-white");
          f.classList.add(
            "border-gray-300",
            "dark:border-gray-600",
            "text-gray-700",
            "dark:text-gray-300"
          );
        });

        filter.classList.add("active", "bg-primary-600", "text-white");
        filter.classList.remove(
          "border-gray-300",
          "dark:border-gray-600",
          "text-gray-700",
          "dark:text-gray-300"
        );

        currentTag = filter.getAttribute("data-tag") || "all";
        applyClientFiltersAndRender(); // Re-filter and render existing API results
      });
    });

    // Sort change event
    sortSelect.addEventListener("change", () => {
      currentSort = sortSelect.value;
      applyClientFiltersAndRender(); // Re-sort and render existing API results
    });

    // Clear search
    clearSearch?.addEventListener("click", () => {
      searchInput.value = "";
      currentTag = "all";
      currentApiResults = []; // Clear API results

      // Reset tag filters UI
      tagFilters.forEach((f) => {
        f.classList.remove("active", "bg-primary-600", "text-white");
        f.classList.add(
          "border-gray-300",
          "dark:border-gray-600",
          "text-gray-700",
          "dark:text-gray-300"
        );
      });
      const allTopicsFilter = document.querySelector(
        '.tag-filter[data-tag="all"]'
      );
      if (allTopicsFilter) {
        allTopicsFilter.classList.add("active", "bg-primary-600", "text-white");
        allTopicsFilter.classList.remove(
          "border-gray-300",
          "dark:border-gray-600",
          "text-gray-700",
          "dark:text-gray-300"
        );
      }

      performSearch();
      searchInput.focus();
    });

    // Initial load - update status to prompt for search
    // updateSearchStatus(0, ''); // Will be handled by initial fetch or lack thereof

    // Check for query parameter on page load
    const urlParams = new URLSearchParams(window.location.search);
    const queryFromUrl = urlParams.get("q");

    if (queryFromUrl) {
      searchInput.value = queryFromUrl;
      debouncedFetchAndDisplayResults(); // Perform initial search if query is in URL
    } else {
      // If no query in URL, then set initial status
      updateSearchStatus(0, "");
    }
  });
</script>
