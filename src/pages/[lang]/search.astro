---
import { getCollection, type CollectionEntry } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import BlogCard from "../../components/BlogCard.astro";
import { useTranslations } from "../../i18n/utils";

export async function getStaticPaths() {
  return [
    { params: { lang: "en" } },
    { params: { lang: "es" } },
    { params: { lang: "ja" } }
  ];
}

const { lang } = Astro.params as { lang: "en" | "es" | "ja" };
const t = useTranslations(lang);

// Get all blog posts for the specific language
const allPosts = await getCollection("blog", ({ id, data }: { id: string; data: { draft: boolean } }) => {
  return id.startsWith(`${lang}/`) && !data.draft;
});

const posts = allPosts.sort(
  (a: CollectionEntry<"blog">, b: CollectionEntry<"blog">) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);

// Get all unique tags
const allTags = [...new Set(posts.flatMap((post: CollectionEntry<"blog">) => post.data.tags || []))];
---

<Layout
  title={`${t("nav.search")} | Astro Batavia`}
  description="Search through our collection of articles and find exactly what you're looking for"
  lang={lang}>
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <!-- Header -->
    <div class="text-center mb-12">
      <h1
        class="text-4xl sm:text-5xl font-bold text-gray-900 dark:text-gray-100 mb-4">
        {t("nav.search")}
      </h1>
      <p class="text-xl text-gray-600 dark:text-gray-300 max-w-3xl mx-auto">
        {
          lang === "es"
            ? "Encuentra artículos, temas e ideas en toda nuestra colección de blog."
            : lang === "ja"
              ? "ブログコレクション全体から記事、トピック、洞察を見つけてください。"
              : "Find articles, topics, and insights across our entire blog collection."
        }
      </p>
    </div>

    <!-- Enhanced Search Box -->
    <div class="max-w-2xl mx-auto mb-12">
      <div class="relative">
        <div
          class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
          <svg
            class="h-6 w-6 text-gray-400"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24">
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
            ></path>
          </svg>
        </div>
        <input
          type="search"
          id="main-search-input"
          placeholder={
            lang === "es"
              ? "Buscar artículos..."
              : lang === "ja"
                ? "記事を検索..."
                : "Search articles..."
          }
          class="block w-full pl-10 pr-12 py-4 text-lg border border-gray-300 dark:border-gray-600 rounded-lg leading-5 bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary-500 dark:focus:ring-primary-400 focus:border-transparent transition-colors duration-200 shadow-sm"
          autocomplete="off"
          spellcheck="false"
        />
        <div class="absolute inset-y-0 right-0 pr-3 flex items-center">
          <kbd
            class="hidden sm:inline-flex items-center px-2 py-1 border border-gray-300 dark:border-gray-600 rounded text-xs font-medium text-gray-500 dark:text-gray-400">
            ⌘K
          </kbd>
        </div>
      </div>
    </div>

    <!-- Search Filters -->
    <div class="mb-8">
      <div
        class="flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between">
        <!-- Tags Filter -->
        <div class="flex-1">
          <label
            class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            {
              lang === "es"
                ? "Filtrar por tema:"
                : lang === "ja"
                  ? "トピックでフィルター:"
                  : "Filter by topic:"
            }
          </label>
          <div class="flex flex-wrap gap-2">
            <button
              class="tag-filter active px-3 py-1.5 text-sm font-medium rounded-full border border-primary-600 bg-primary-600 text-white hover:bg-primary-700 transition-colors duration-200"
              data-tag="all">
              {
                lang === "es"
                  ? "Todos los temas"
                  : lang === "ja"
                    ? "すべてのトピック"
                    : "All Topics"
              }
            </button>
            {allTags.slice(0, 10).map((tag) => (
              <button
                class="tag-filter px-3 py-1.5 text-sm font-medium rounded-full border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:border-primary-600 hover:text-primary-600 dark:hover:text-primary-400 transition-colors duration-200"
                data-tag={tag}>
                #{tag}
              </button>
            ))}
          </div>
        </div>

        <!-- Sort Options -->
        <div class="flex flex-col sm:flex-row gap-2">
          <label
            class="block text-sm font-medium text-gray-700 dark:text-gray-300 sm:sr-only">
            {
              lang === "es"
                ? "Ordenar por:"
                : lang === "ja"
                  ? "並び替え:"
                  : "Sort by:"
            }
          </label>
          <select
            id="sort-select"
            class="px-3 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent">
            <option value="date-desc">
              {
                lang === "es"
                  ? "Más reciente primero"
                  : lang === "ja"
                    ? "新しい順"
                    : "Newest First"
              }
            </option>
            <option value="date-asc">
              {
                lang === "es"
                  ? "Más antiguo primero"
                  : lang === "ja"
                    ? "古い順"
                    : "Oldest First"
              }
            </option>
            <option value="title-asc">
              {
                lang === "es"
                  ? "Título A-Z"
                  : lang === "ja"
                    ? "タイトル A-Z"
                    : "Title A-Z"
              }
            </option>
            <option value="title-desc">
              {
                lang === "es"
                  ? "Título Z-A"
                  : lang === "ja"
                    ? "タイトル Z-A"
                    : "Title Z-A"
              }
            </option>
          </select>
        </div>
      </div>
    </div>

    <!-- Search Results -->
    <div
      id="search-results"
      class="mb-8">
      <div
        id="search-status"
        class="text-center text-gray-500 dark:text-gray-400 mb-6">
        {
          lang === "es"
            ? `Ingresa un término de búsqueda para encontrar artículos, o navega por los ${posts.length} artículos a continuación.`
            : lang === "ja"
              ? `記事を見つけるために検索語を入力するか、以下の${posts.length}記事を閲覧してください。`
              : `Enter a search term to find articles, or browse all ${posts.length} articles below.`
        }
      </div>
      <div
        id="results-container"
        class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
        {posts.map((post: CollectionEntry<"blog">) => (
          <div
            class="post-item"
            data-tags={JSON.stringify(post.data.tags || [])}
            data-title={post.data.title}
            data-description={post.data.description}
            data-date={post.data.pubDate.toISOString()}>
            <BlogCard post={post} lang={lang} />
          </div>
        ))}
      </div>
    </div>

    <!-- No Results State -->
    <div
      id="no-results"
      class="hidden text-center py-12">
      <svg
        class="w-16 h-16 mx-auto text-gray-400 mb-4"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24">
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
        ></path>
      </svg>
      <h3 class="text-lg font-medium text-gray-900 dark:text-gray-100 mb-2">
        {
          lang === "es"
            ? "No se encontraron resultados"
            : lang === "ja"
              ? "結果が見つかりません"
              : "No results found"
        }
      </h3>
      <p class="text-gray-500 dark:text-gray-400 mb-4">
        {
          lang === "es"
            ? "Intenta ajustar tus términos de búsqueda o explora nuestros temas a continuación."
            : lang === "ja"
              ? "検索語を調整するか、以下のトピックを閲覧してください。"
              : "Try adjusting your search terms or browse our topics below."
        }
      </p>
      <button
        id="clear-search"
        class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-primary-600 dark:text-primary-400 bg-primary-50 dark:bg-primary-900/20 hover:bg-primary-100 dark:hover:bg-primary-900/30 transition-colors duration-200">
        {
          lang === "es"
            ? "Limpiar Búsqueda"
            : lang === "ja"
              ? "検索をクリア"
              : "Clear Search"
        }
      </button>
    </div>
  </div>
</Layout>

<script>
  document.addEventListener("astro:page-load", () => {
    const searchInput = document.getElementById(
      "main-search-input"
    ) as HTMLInputElement;
    const tagFilters = document.querySelectorAll(".tag-filter");
    const sortSelect = document.getElementById(
      "sort-select"
    ) as HTMLSelectElement;
    const resultsContainer = document.getElementById("results-container")!;
    const searchStatus = document.getElementById("search-status")!;
    const noResults = document.getElementById("no-results")!;
    const clearSearch = document.getElementById("clear-search");
    const currentLang = document.documentElement.lang;

    if (!searchInput) return;

    let allPosts: any[] = [];
    let filteredPosts: any[] = [];
    let currentTag = "all";
    let currentSort = "date-desc";

    // Initialize posts from DOM
    function initializePosts() {
      const postElements = document.querySelectorAll(".post-item");
      allPosts = Array.from(postElements).map((el) => ({
        element: el,
        tags: JSON.parse(el.getAttribute("data-tags") || "[]"),
        title: el.getAttribute("data-title") || "",
        description: el.getAttribute("data-description") || "",
        date: new Date(el.getAttribute("data-date") || ""),
      }));
      filteredPosts = [...allPosts];
    }

    // Keyboard shortcut for search
    document.addEventListener("keydown", (e) => {
      if ((e.metaKey || e.ctrlKey) && e.key === "k") {
        e.preventDefault();
        searchInput.focus();
      }
    });

    // Search functionality
    function performSearch() {
      const query = searchInput.value.toLowerCase().trim();
      
      if (query === "") {
        filteredPosts = [...allPosts];
      } else {
        filteredPosts = allPosts.filter((post) => {
          const searchText = `${post.title} ${post.description}`.toLowerCase();
          return searchText.includes(query);
        });
      }
      
      applyFilters();
    }

    // Tag filtering
    function applyTagFilter(tag: string) {
      currentTag = tag;
      
      if (tag === "all") {
        // No additional filtering needed
      } else {
        filteredPosts = filteredPosts.filter((post) =>
          post.tags.includes(tag)
        );
      }
      
      applySorting();
    }

    // Sorting
    function applySorting() {
      switch (currentSort) {
        case "date-desc":
          filteredPosts.sort((a, b) => b.date.getTime() - a.date.getTime());
          break;
        case "date-asc":
          filteredPosts.sort((a, b) => a.date.getTime() - b.date.getTime());
          break;
        case "title-asc":
          filteredPosts.sort((a, b) => a.title.localeCompare(b.title));
          break;
        case "title-desc":
          filteredPosts.sort((a, b) => b.title.localeCompare(a.title));
          break;
      }
      
      renderResults();
    }

    // Apply all filters
    function applyFilters() {
      applyTagFilter(currentTag);
    }

    // Render results
    function renderResults() {
      resultsContainer.innerHTML = "";
      
      if (filteredPosts.length === 0) {
        noResults.classList.remove("hidden");
        searchStatus.textContent = "";
      } else {
        noResults.classList.add("hidden");
        const resultText = currentLang === "es" 
          ? `Mostrando ${filteredPosts.length} artículo${filteredPosts.length !== 1 ? 's' : ''}`
          : currentLang === "ja"
            ? `${filteredPosts.length}件の記事を表示`
            : `Showing ${filteredPosts.length} article${filteredPosts.length !== 1 ? 's' : ''}`;
        searchStatus.textContent = resultText;
        
        filteredPosts.forEach((post) => {
          resultsContainer.appendChild(post.element.cloneNode(true));
        });
      }
    }

    // Event listeners
    searchInput.addEventListener("input", performSearch);
    
    tagFilters.forEach((filter) => {
      filter.addEventListener("click", (e) => {
        e.preventDefault();
        const tag = (e.target as HTMLElement).getAttribute("data-tag") || "all";
        
        // Update active state
        tagFilters.forEach((f) => f.classList.remove("active", "bg-primary-600", "text-white"));
        tagFilters.forEach((f) => f.classList.add("border-gray-300", "dark:border-gray-600", "text-gray-700", "dark:text-gray-300"));
        
        (e.target as HTMLElement).classList.add("active", "bg-primary-600", "text-white");
        (e.target as HTMLElement).classList.remove("border-gray-300", "dark:border-gray-600", "text-gray-700", "dark:text-gray-300");
        
        performSearch();
      });
    });
    
    sortSelect.addEventListener("change", (e) => {
      currentSort = (e.target as HTMLSelectElement).value;
      applySorting();
    });
    
    if (clearSearch) {
      clearSearch.addEventListener("click", () => {
        searchInput.value = "";
        performSearch();
      });
    }

    // Initialize
    initializePosts();
    renderResults();
  });
</script>
