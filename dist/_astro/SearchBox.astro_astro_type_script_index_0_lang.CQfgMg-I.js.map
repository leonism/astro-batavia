{"version":3,"file":"SearchBox.astro_astro_type_script_index_0_lang.CQfgMg-I.js","sources":["../../src/utils/search.ts","../../src/components/ui/SearchBox.astro?astro&type=script&index=0&lang.ts"],"sourcesContent":["// Removed astro:content imports as they are server-side only\n\nexport interface SearchResult {\n  title: string;\n  description: string;\n  url: string;\n  pubDate: string;\n  tags?: string[];\n  lang: string;\n  slug: string;\n}\n\n// Simple client-side search implementation\nexport async function searchPosts(query: string, lang: string = 'en'): Promise<SearchResult[]> {\n  try {\n    // Fetch posts from API endpoint\n    const response = await fetch(`/api/search?q=${encodeURIComponent(query)}&lang=${lang}`);\n    if (!response.ok) {\n      throw new Error('Search API request failed');\n    }\n    \n    const results = await response.json();\n    return results;\n  } catch (error) {\n    console.error('Search error:', error);\n    return [];\n  }\n}\n\nfunction formatSearchDate(date: Date): string {\n  return new Intl.DateTimeFormat('en-US', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n  }).format(date);\n}\n\n// Advanced search with filters\nexport interface SearchFilters {\n  tags?: string[];\n  dateFrom?: Date;\n  dateTo?: Date;\n  author?: string;\n  sortBy?: 'date' | 'title' | 'relevance';\n  sortOrder?: 'asc' | 'desc';\n}\n\nexport async function advancedSearch(\n  query: string,\n  filters: SearchFilters = {},\n  lang: string = 'en'\n): Promise<SearchResult[]> {\n  try {\n    const allPosts = await getCollection('blog', ({ id, data }) => {\n      return id.startsWith(`${lang}/`) && !data.draft;\n    });\n\n    let filteredPosts = allPosts;\n\n    // Apply text search\n    if (query.trim()) {\n      filteredPosts = filteredPosts.filter(post => {\n        const searchText = `${post.data.title} ${post.data.description} ${(post.data.tags || []).join(' ')}`.toLowerCase();\n        return searchText.includes(query.toLowerCase());\n      });\n    }\n\n    // Apply tag filter\n    if (filters.tags && filters.tags.length > 0) {\n      filteredPosts = filteredPosts.filter(post => {\n        return filters.tags!.some(tag => (post.data.tags || []).includes(tag));\n      });\n    }\n\n    // Apply date range filter\n    if (filters.dateFrom) {\n      filteredPosts = filteredPosts.filter(post => post.data.pubDate >= filters.dateFrom!);\n    }\n\n    if (filters.dateTo) {\n      filteredPosts = filteredPosts.filter(post => post.data.pubDate <= filters.dateTo!);\n    }\n\n    // Apply author filter\n    if (filters.author) {\n      filteredPosts = filteredPosts.filter(post =>\n        post.data.author.toLowerCase().includes(filters.author!.toLowerCase())\n      );\n    }\n\n    // Sort results\n    const sortBy = filters.sortBy || 'date';\n    const sortOrder = filters.sortOrder || 'desc';\n\n    filteredPosts.sort((a, b) => {\n      let comparison = 0;\n\n      switch (sortBy) {\n        case 'title':\n          comparison = a.data.title.localeCompare(b.data.title);\n          break;\n        case 'date':\n          comparison = a.data.pubDate.getTime() - b.data.pubDate.getTime();\n          break;\n        case 'relevance':\n          // Simple relevance scoring based on query matches in title vs description\n          const aTitle = a.data.title.toLowerCase();\n          const bTitle = b.data.title.toLowerCase();\n          const queryLower = query.toLowerCase();\n\n          const aScore = (aTitle.includes(queryLower) ? 2 : 0) +\n                        (a.data.description.toLowerCase().includes(queryLower) ? 1 : 0);\n          const bScore = (bTitle.includes(queryLower) ? 2 : 0) +\n                        (b.data.description.toLowerCase().includes(queryLower) ? 1 : 0);\n\n          comparison = bScore - aScore;\n          break;\n      }\n\n      return sortOrder === 'desc' ? -comparison : comparison;\n    });\n\n    return filteredPosts.map(post => ({\n      title: post.data.title,\n      description: post.data.description,\n      url: lang === 'en' ? `/blog/${post.slug.replace('en/', '')}` : `/${lang}/blog/${post.slug.replace(`${lang}/`, '')}`,\n      pubDate: formatSearchDate(post.data.pubDate),\n      tags: post.data.tags,\n      lang: lang,\n      slug: post.slug,\n    }));\n  } catch (error) {\n    console.error('Advanced search error:', error);\n    return [];\n  }\n}\n\n// Get popular tags for search suggestions\nexport async function getPopularTags(lang: string = 'en', limit: number = 10): Promise<{ tag: string; count: number }[]> {\n  try {\n    const allPosts = await getCollection('blog', ({ id, data }) => {\n      return id.startsWith(`${lang}/`) && !data.draft;\n    });\n\n    const tagCounts = new Map<string, number>();\n\n    allPosts.forEach(post => {\n      (post.data.tags || []).forEach(tag => {\n        tagCounts.set(tag, (tagCounts.get(tag) || 0) + 1);\n      });\n    });\n\n    return Array.from(tagCounts.entries())\n      .map(([tag, count]) => ({ tag, count }))\n      .sort((a, b) => b.count - a.count)\n      .slice(0, limit);\n  } catch (error) {\n    console.error('Error getting popular tags:', error);\n    return [];\n  }\n}\n\n// Search suggestions based on partial query\nexport async function getSearchSuggestions(partialQuery: string, lang: string = 'en', limit: number = 5): Promise<string[]> {\n  try {\n    if (partialQuery.length < 2) return [];\n\n    const allPosts = await getCollection('blog', ({ id, data }) => {\n      return id.startsWith(`${lang}/`) && !data.draft;\n    });\n\n    const suggestions = new Set<string>();\n    const queryLower = partialQuery.toLowerCase();\n\n    allPosts.forEach(post => {\n      // Extract words from title and description\n      const words = `${post.data.title} ${post.data.description}`\n        .toLowerCase()\n        .split(/\\s+/)\n        .filter(word => word.length > 2 && word.includes(queryLower));\n\n      words.forEach(word => {\n        if (suggestions.size < limit * 3) {\n          suggestions.add(word);\n        }\n      });\n\n      // Add matching tags\n      (post.data.tags || []).forEach(tag => {\n        if (tag.toLowerCase().includes(queryLower) && suggestions.size < limit * 3) {\n          suggestions.add(tag);\n        }\n      });\n    });\n\n    return Array.from(suggestions)\n      .sort((a, b) => {\n        // Prioritize exact matches and shorter words\n        const aExact = a.startsWith(queryLower) ? 0 : 1;\n        const bExact = b.startsWith(queryLower) ? 0 : 1;\n        if (aExact !== bExact) return aExact - bExact;\n        return a.length - b.length;\n      })\n      .slice(0, limit);\n  } catch (error) {\n    console.error('Failed to fetch search results:', error);\n    return [];\n  }\n}\n","  import { searchPosts } from \"@/utils/search\";\n\n  document.addEventListener(\"DOMContentLoaded\", () => {\n    const searchInput = document.getElementById(\n      \"search-input\"\n    ) as HTMLInputElement;\n    const searchResults = document.getElementById(\"search-results\");\n    const searchResultsContent = document.getElementById(\n      \"search-results-content\"\n    );\n\n    if (!searchInput || !searchResults || !searchResultsContent) return;\n\n    let searchTimeout: number;\n\n    // Handle search input\n    searchInput.addEventListener(\"input\", (e) => {\n      const query = (e.target as HTMLInputElement).value.trim();\n\n      // Clear previous timeout\n      clearTimeout(searchTimeout);\n\n      if (query.length < 2) {\n        searchResults.classList.add(\"hidden\");\n        return;\n      }\n\n      // Debounce search\n      searchTimeout = window.setTimeout(() => {\n        performSearch(query);\n      }, 300);\n    });\n\n    // Perform search and display results\n    async function performSearch(query: string) {\n      try {\n        const results = await searchPosts(query);\n        displayResults(results, query);\n      } catch (error) {\n        console.error(\"Search error:\", error);\n        displayNoResults();\n      }\n    }\n\n    // Display search results\n    function displayResults(results: any[], query: string) {\n      if (results.length === 0) {\n        displayNoResults();\n        return;\n      }\n\n      const resultHtml = results\n        .map(\n          (result) => `\n        <a\n          href=\"${result.url}\"\n          class=\"block px-4 py-3 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors duration-200\"\n        >\n          <div class=\"flex items-start space-x-3\">\n            <div class=\"flex-1 min-w-0\">\n              <h3 class=\"text-sm font-medium text-gray-900 dark:text-gray-100 truncate\">\n                ${highlightText(result.title, query)}\n              </h3>\n              <p class=\"text-xs text-gray-500 dark:text-gray-400 mt-1 line-clamp-2\">\n                ${highlightText(result.description, query)}\n              </p>\n              <div class=\"flex items-center mt-2 space-x-2\">\n                <span class=\"text-xs text-gray-400 dark:text-gray-500\">\n                  ${result.pubDate}\n                </span>\n                ${\n                  result.tags\n                    ? result.tags\n                        .map(\n                          (tag: string) => `\n                  <span class=\"inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-primary-100 text-primary-800 dark:bg-primary-900 dark:text-primary-200\">\n                    ${tag}\n                  </span>\n                `\n                        )\n                        .join(\"\")\n                    : \"\"\n                }\n              </div>\n            </div>\n          </div>\n        </a>\n      `\n        )\n        .join(\"\");\n\n      if (searchResultsContent) searchResultsContent.innerHTML = resultHtml;\n      if (searchResults) searchResults.classList.remove(\"hidden\");\n    }\n\n    // Display no results message\n    function displayNoResults() {\n      const lang = document.documentElement.lang || \"en\";\n      const messages = {\n        en: \"No articles found.\",\n        es: \"No se encontraron artículos.\",\n        ja: \"記事が見つかりません。\",\n      };\n\n      if (searchResultsContent) {\n        searchResultsContent.innerHTML = `\n          <div class=\"px-4 py-3 text-sm text-gray-500 dark:text-gray-400 text-center\">\n            ${messages[lang as keyof typeof messages] || messages.en}\n          </div>\n        `;\n      }\n      if (searchResults) searchResults.classList.remove(\"hidden\");\n    }\n\n    // Highlight search terms in text\n    function highlightText(text: string, query: string): string {\n      if (!query) return text;\n\n      const regex = new RegExp(\n        `(${query.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\")})`,\n        \"gi\"\n      );\n      return text.replace(\n        regex,\n        '<mark class=\"bg-yellow-200 dark:bg-yellow-800\">$1</mark>'\n      );\n    }\n\n    // Hide results when clicking outside\n    document.addEventListener(\"click\", (e) => {\n      if (\n        !searchInput.contains(e.target as Node) &&\n        !searchResults.contains(e.target as Node)\n      ) {\n        searchResults.classList.add(\"hidden\");\n      }\n    });\n\n    // Handle keyboard navigation\n    searchInput.addEventListener(\"keydown\", (e) => {\n      if (e.key === \"Escape\") {\n        searchResults.classList.add(\"hidden\");\n        searchInput.blur();\n      }\n    });\n  });\n\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"],"names":["searchPosts","query","lang","response","error","searchInput","searchResults","searchResultsContent","searchTimeout","performSearch","results","displayResults","displayNoResults","resultHtml","result","highlightText","tag","messages","text","regex"],"mappings":"+YAaA,eAAsBA,EAAYC,EAAeC,EAAe,KAA+B,CAC7F,GAAI,CAEF,MAAMC,EAAW,MAAM,MAAM,iBAAiB,mBAAmBF,CAAK,CAAC,SAASC,CAAI,EAAE,EACtF,GAAI,CAACC,EAAS,GACZ,MAAM,IAAI,MAAM,2BAA2B,EAI7C,OADgB,MAAMA,EAAS,KAAA,CACxB,OACAC,EAAO,CACd,eAAQ,MAAM,gBAAiBA,CAAK,EAC7B,CAAA,CAAC,CAEZ,CCsBE,SAAS,iBAAiB,mBAAoB,IAAM,CAClD,MAAMC,EAAc,SAAS,eAC3B,cACF,EACMC,EAAgB,SAAS,eAAe,gBAAgB,EACxDC,EAAuB,SAAS,eACpC,wBACF,EAEA,GAAI,CAACF,GAAe,CAACC,GAAiB,CAACC,EAAsB,OAE7D,IAAIC,EAGJH,EAAY,iBAAiB,QAAU,GAAM,CAC3C,MAAMJ,EAAS,EAAE,OAA4B,MAAM,KAAA,EAKnD,GAFA,aAAaO,CAAa,EAEtBP,EAAM,OAAS,EAAG,CACpBK,EAAc,UAAU,IAAI,QAAQ,EACpC,MACF,CAGAE,EAAgB,OAAO,WAAW,IAAM,CACtCC,EAAcR,CAAK,CACrB,EAAG,GAAG,EACP,EAGD,eAAeQ,EAAcR,EAAe,CAC1C,GAAI,CACF,MAAMS,EAAU,MAAMV,EAAYC,CAAK,EACvCU,EAAeD,EAAST,CAAK,CAC/B,OAASG,EAAO,CACd,QAAQ,MAAM,gBAAiBA,CAAK,EACpCQ,EAAA,CACF,CACF,CAGA,SAASD,EAAeD,EAAgBT,EAAe,CACrD,GAAIS,EAAQ,SAAW,EAAG,CACxBE,EAAA,EACA,MACF,CAEA,MAAMC,EAAaH,EAChB,IACEI,GAAW;AAAA;AAAA,kBAEJA,EAAO,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAMVC,EAAcD,EAAO,MAAOb,CAAK,CAAC;AAAA;AAAA;AAAA,kBAGlCc,EAAcD,EAAO,YAAab,CAAK,CAAC;AAAA;AAAA;AAAA;AAAA,oBAItCa,EAAO,OAAO;AAAA;AAAA,kBAGhBA,EAAO,KACHA,EAAO,KACJ,IACEE,GAAgB;AAAA;AAAA,sBAErBA,CAAG;AAAA;AAAA,mBAIA,KAAK,EAAE,EACV,EACN;AAAA;AAAA;AAAA;AAAA;AAAA,OAMR,EACC,KAAK,EAAE,EAENT,MAA2C,UAAYM,GACvDP,GAAeA,EAAc,UAAU,OAAO,QAAQ,CAC5D,CAGA,SAASM,GAAmB,CAC1B,MAAMV,EAAO,SAAS,gBAAgB,MAAQ,KACxCe,EAAW,CACf,GAAI,qBACJ,GAAI,+BACJ,GAAI,aACN,EAEIV,IACFA,EAAqB,UAAY;AAAA;AAAA,cAE3BU,EAASf,CAA6B,GAAKe,EAAS,EAAE;AAAA;AAAA,WAI1DX,GAAeA,EAAc,UAAU,OAAO,QAAQ,CAC5D,CAGA,SAASS,EAAcG,EAAcjB,EAAuB,CAC1D,GAAI,CAACA,EAAO,OAAOiB,EAEnB,MAAMC,EAAQ,IAAI,OAChB,IAAIlB,EAAM,QAAQ,sBAAuB,MAAM,CAAC,IAChD,IACF,EACA,OAAOiB,EAAK,QACVC,EACA,0DACF,CACF,CAGA,SAAS,iBAAiB,QAAU,GAAM,CAEtC,CAACd,EAAY,SAAS,EAAE,MAAc,GACtC,CAACC,EAAc,SAAS,EAAE,MAAc,GAExCA,EAAc,UAAU,IAAI,QAAQ,EAEvC,EAGDD,EAAY,iBAAiB,UAAY,GAAM,CACzC,EAAE,MAAQ,WACZC,EAAc,UAAU,IAAI,QAAQ,EACpCD,EAAY,KAAA,GAEf,CACH,CAAC"}